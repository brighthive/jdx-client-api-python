# coding: utf-8

"""
    JDX reference application API

    This is a collection of schemas and endpoints for the various JDX, Concentric Sky facing REST endpoints, the schemas define an API contract of sorts between the request and response expectations of the JDX reference application. This API is to be mutually developed by Concentric Sky and BrightHive.  # noqa: E501

    The version of the OpenAPI document: 0.0.13
    Contact: engineering@brighthive.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class JobDescriptionContextRequestAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'primary_economic_activity': 'str',
        'job_location': 'str',
        'occupation_code': 'str',
        'industry_code': 'str',
        'assessment': 'str',
        'application_location_requirement': 'str',
        'citizenship_requirement': 'str',
        'physical_requirement': 'str',
        'sensory_requirement': 'str',
        'security_clearance_requirement': 'str',
        'special_commitment': 'str',
        'job_title': 'str',
        'job_summary': 'str',
        'job_location_type': 'str',
        'employment_unit': 'str',
        'employer_identifier': 'str',
        'requirements': 'str',
        'salary_currency': 'str',
        'salary_minimum': 'str',
        'salary_maximum': 'str',
        'salary_frequency': 'str',
        'incentive_compensation': 'str',
        'job_benefits': 'list[str]',
        'employment_agreement': 'str',
        'job_term': 'str',
        'job_schedule': 'str',
        'work_hours': 'str',
        'employer_name': 'str',
        'employer_overview': 'str',
        'employer_email': 'str',
        'employer_website': 'str',
        'employer_address': 'str',
        'employer_phone': 'str',
        'date_posted': 'str',
        'valid_through': 'str',
        'job_openings': 'str'
    }

    attribute_map = {
        'primary_economic_activity': 'primaryEconomicActivity',
        'job_location': 'jobLocation',
        'occupation_code': 'occupationCode',
        'industry_code': 'industryCode',
        'assessment': 'assessment',
        'application_location_requirement': 'applicationLocationRequirement',
        'citizenship_requirement': 'citizenshipRequirement',
        'physical_requirement': 'physicalRequirement',
        'sensory_requirement': 'sensoryRequirement',
        'security_clearance_requirement': 'securityClearanceRequirement',
        'special_commitment': 'specialCommitment',
        'job_title': 'jobTitle',
        'job_summary': 'jobSummary',
        'job_location_type': 'jobLocationType',
        'employment_unit': 'employmentUnit',
        'employer_identifier': 'employerIdentifier',
        'requirements': 'requirements',
        'salary_currency': 'salaryCurrency',
        'salary_minimum': 'salaryMinimum',
        'salary_maximum': 'salaryMaximum',
        'salary_frequency': 'salaryFrequency',
        'incentive_compensation': 'incentiveCompensation',
        'job_benefits': 'jobBenefits',
        'employment_agreement': 'employmentAgreement',
        'job_term': 'jobTerm',
        'job_schedule': 'jobSchedule',
        'work_hours': 'workHours',
        'employer_name': 'employerName',
        'employer_overview': 'employerOverview',
        'employer_email': 'employerEmail',
        'employer_website': 'employerWebsite',
        'employer_address': 'employerAddress',
        'employer_phone': 'employerPhone',
        'date_posted': 'datePosted',
        'valid_through': 'validThrough',
        'job_openings': 'jobOpenings'
    }

    def __init__(self, primary_economic_activity=None, job_location=None, occupation_code=None, industry_code=None, assessment=None, application_location_requirement=None, citizenship_requirement=None, physical_requirement=None, sensory_requirement=None, security_clearance_requirement=None, special_commitment=None, job_title=None, job_summary=None, job_location_type=None, employment_unit=None, employer_identifier=None, requirements=None, salary_currency=None, salary_minimum=None, salary_maximum=None, salary_frequency=None, incentive_compensation=None, job_benefits=None, employment_agreement=None, job_term=None, job_schedule=None, work_hours=None, employer_name=None, employer_overview=None, employer_email=None, employer_website=None, employer_address=None, employer_phone=None, date_posted=None, valid_through=None, job_openings=None):  # noqa: E501
        """JobDescriptionContextRequestAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._primary_economic_activity = None
        self._job_location = None
        self._occupation_code = None
        self._industry_code = None
        self._assessment = None
        self._application_location_requirement = None
        self._citizenship_requirement = None
        self._physical_requirement = None
        self._sensory_requirement = None
        self._security_clearance_requirement = None
        self._special_commitment = None
        self._job_title = None
        self._job_summary = None
        self._job_location_type = None
        self._employment_unit = None
        self._employer_identifier = None
        self._requirements = None
        self._salary_currency = None
        self._salary_minimum = None
        self._salary_maximum = None
        self._salary_frequency = None
        self._incentive_compensation = None
        self._job_benefits = None
        self._employment_agreement = None
        self._job_term = None
        self._job_schedule = None
        self._work_hours = None
        self._employer_name = None
        self._employer_overview = None
        self._employer_email = None
        self._employer_website = None
        self._employer_address = None
        self._employer_phone = None
        self._date_posted = None
        self._valid_through = None
        self._job_openings = None
        self.discriminator = None

        if primary_economic_activity is not None:
            self.primary_economic_activity = primary_economic_activity
        if job_location is not None:
            self.job_location = job_location
        if occupation_code is not None:
            self.occupation_code = occupation_code
        if industry_code is not None:
            self.industry_code = industry_code
        if assessment is not None:
            self.assessment = assessment
        if application_location_requirement is not None:
            self.application_location_requirement = application_location_requirement
        if citizenship_requirement is not None:
            self.citizenship_requirement = citizenship_requirement
        if physical_requirement is not None:
            self.physical_requirement = physical_requirement
        if sensory_requirement is not None:
            self.sensory_requirement = sensory_requirement
        if security_clearance_requirement is not None:
            self.security_clearance_requirement = security_clearance_requirement
        if special_commitment is not None:
            self.special_commitment = special_commitment
        if job_title is not None:
            self.job_title = job_title
        if job_summary is not None:
            self.job_summary = job_summary
        if job_location_type is not None:
            self.job_location_type = job_location_type
        if employment_unit is not None:
            self.employment_unit = employment_unit
        if employer_identifier is not None:
            self.employer_identifier = employer_identifier
        if requirements is not None:
            self.requirements = requirements
        if salary_currency is not None:
            self.salary_currency = salary_currency
        if salary_minimum is not None:
            self.salary_minimum = salary_minimum
        if salary_maximum is not None:
            self.salary_maximum = salary_maximum
        if salary_frequency is not None:
            self.salary_frequency = salary_frequency
        if incentive_compensation is not None:
            self.incentive_compensation = incentive_compensation
        if job_benefits is not None:
            self.job_benefits = job_benefits
        if employment_agreement is not None:
            self.employment_agreement = employment_agreement
        if job_term is not None:
            self.job_term = job_term
        if job_schedule is not None:
            self.job_schedule = job_schedule
        if work_hours is not None:
            self.work_hours = work_hours
        if employer_name is not None:
            self.employer_name = employer_name
        if employer_overview is not None:
            self.employer_overview = employer_overview
        if employer_email is not None:
            self.employer_email = employer_email
        if employer_website is not None:
            self.employer_website = employer_website
        if employer_address is not None:
            self.employer_address = employer_address
        if employer_phone is not None:
            self.employer_phone = employer_phone
        if date_posted is not None:
            self.date_posted = date_posted
        if valid_through is not None:
            self.valid_through = valid_through
        if job_openings is not None:
            self.job_openings = job_openings

    @property
    def primary_economic_activity(self):
        """Gets the primary_economic_activity of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The primary_economic_activity of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._primary_economic_activity

    @primary_economic_activity.setter
    def primary_economic_activity(self, primary_economic_activity):
        """Sets the primary_economic_activity of this JobDescriptionContextRequestAllOf.


        :param primary_economic_activity: The primary_economic_activity of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if primary_economic_activity is not None and len(primary_economic_activity) > 1024:
            raise ValueError("Invalid value for `primary_economic_activity`, length must be less than or equal to `1024`")  # noqa: E501

        self._primary_economic_activity = primary_economic_activity

    @property
    def job_location(self):
        """Gets the job_location of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The job_location of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._job_location

    @job_location.setter
    def job_location(self, job_location):
        """Sets the job_location of this JobDescriptionContextRequestAllOf.


        :param job_location: The job_location of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if job_location is not None and len(job_location) > 1024:
            raise ValueError("Invalid value for `job_location`, length must be less than or equal to `1024`")  # noqa: E501

        self._job_location = job_location

    @property
    def occupation_code(self):
        """Gets the occupation_code of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The occupation_code of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._occupation_code

    @occupation_code.setter
    def occupation_code(self, occupation_code):
        """Sets the occupation_code of this JobDescriptionContextRequestAllOf.


        :param occupation_code: The occupation_code of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """

        self._occupation_code = occupation_code

    @property
    def industry_code(self):
        """Gets the industry_code of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The industry_code of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._industry_code

    @industry_code.setter
    def industry_code(self, industry_code):
        """Sets the industry_code of this JobDescriptionContextRequestAllOf.


        :param industry_code: The industry_code of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """

        self._industry_code = industry_code

    @property
    def assessment(self):
        """Gets the assessment of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The assessment of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._assessment

    @assessment.setter
    def assessment(self, assessment):
        """Sets the assessment of this JobDescriptionContextRequestAllOf.


        :param assessment: The assessment of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if assessment is not None and len(assessment) > 1024:
            raise ValueError("Invalid value for `assessment`, length must be less than or equal to `1024`")  # noqa: E501

        self._assessment = assessment

    @property
    def application_location_requirement(self):
        """Gets the application_location_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The application_location_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._application_location_requirement

    @application_location_requirement.setter
    def application_location_requirement(self, application_location_requirement):
        """Sets the application_location_requirement of this JobDescriptionContextRequestAllOf.


        :param application_location_requirement: The application_location_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if application_location_requirement is not None and len(application_location_requirement) > 1024:
            raise ValueError("Invalid value for `application_location_requirement`, length must be less than or equal to `1024`")  # noqa: E501

        self._application_location_requirement = application_location_requirement

    @property
    def citizenship_requirement(self):
        """Gets the citizenship_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The citizenship_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._citizenship_requirement

    @citizenship_requirement.setter
    def citizenship_requirement(self, citizenship_requirement):
        """Sets the citizenship_requirement of this JobDescriptionContextRequestAllOf.


        :param citizenship_requirement: The citizenship_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if citizenship_requirement is not None and len(citizenship_requirement) > 1024:
            raise ValueError("Invalid value for `citizenship_requirement`, length must be less than or equal to `1024`")  # noqa: E501

        self._citizenship_requirement = citizenship_requirement

    @property
    def physical_requirement(self):
        """Gets the physical_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The physical_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._physical_requirement

    @physical_requirement.setter
    def physical_requirement(self, physical_requirement):
        """Sets the physical_requirement of this JobDescriptionContextRequestAllOf.


        :param physical_requirement: The physical_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if physical_requirement is not None and len(physical_requirement) > 1024:
            raise ValueError("Invalid value for `physical_requirement`, length must be less than or equal to `1024`")  # noqa: E501

        self._physical_requirement = physical_requirement

    @property
    def sensory_requirement(self):
        """Gets the sensory_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The sensory_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._sensory_requirement

    @sensory_requirement.setter
    def sensory_requirement(self, sensory_requirement):
        """Sets the sensory_requirement of this JobDescriptionContextRequestAllOf.


        :param sensory_requirement: The sensory_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if sensory_requirement is not None and len(sensory_requirement) > 1024:
            raise ValueError("Invalid value for `sensory_requirement`, length must be less than or equal to `1024`")  # noqa: E501

        self._sensory_requirement = sensory_requirement

    @property
    def security_clearance_requirement(self):
        """Gets the security_clearance_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The security_clearance_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._security_clearance_requirement

    @security_clearance_requirement.setter
    def security_clearance_requirement(self, security_clearance_requirement):
        """Sets the security_clearance_requirement of this JobDescriptionContextRequestAllOf.


        :param security_clearance_requirement: The security_clearance_requirement of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if security_clearance_requirement is not None and len(security_clearance_requirement) > 1024:
            raise ValueError("Invalid value for `security_clearance_requirement`, length must be less than or equal to `1024`")  # noqa: E501

        self._security_clearance_requirement = security_clearance_requirement

    @property
    def special_commitment(self):
        """Gets the special_commitment of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The special_commitment of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._special_commitment

    @special_commitment.setter
    def special_commitment(self, special_commitment):
        """Sets the special_commitment of this JobDescriptionContextRequestAllOf.


        :param special_commitment: The special_commitment of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if special_commitment is not None and len(special_commitment) > 1024:
            raise ValueError("Invalid value for `special_commitment`, length must be less than or equal to `1024`")  # noqa: E501

        self._special_commitment = special_commitment

    @property
    def job_title(self):
        """Gets the job_title of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The job_title of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this JobDescriptionContextRequestAllOf.


        :param job_title: The job_title of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if job_title is not None and len(job_title) > 1024:
            raise ValueError("Invalid value for `job_title`, length must be less than or equal to `1024`")  # noqa: E501

        self._job_title = job_title

    @property
    def job_summary(self):
        """Gets the job_summary of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The job_summary of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._job_summary

    @job_summary.setter
    def job_summary(self, job_summary):
        """Sets the job_summary of this JobDescriptionContextRequestAllOf.


        :param job_summary: The job_summary of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if job_summary is not None and len(job_summary) > 1024:
            raise ValueError("Invalid value for `job_summary`, length must be less than or equal to `1024`")  # noqa: E501

        self._job_summary = job_summary

    @property
    def job_location_type(self):
        """Gets the job_location_type of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The job_location_type of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._job_location_type

    @job_location_type.setter
    def job_location_type(self, job_location_type):
        """Sets the job_location_type of this JobDescriptionContextRequestAllOf.


        :param job_location_type: The job_location_type of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if job_location_type is not None and len(job_location_type) > 1024:
            raise ValueError("Invalid value for `job_location_type`, length must be less than or equal to `1024`")  # noqa: E501

        self._job_location_type = job_location_type

    @property
    def employment_unit(self):
        """Gets the employment_unit of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The employment_unit of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._employment_unit

    @employment_unit.setter
    def employment_unit(self, employment_unit):
        """Sets the employment_unit of this JobDescriptionContextRequestAllOf.


        :param employment_unit: The employment_unit of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if employment_unit is not None and len(employment_unit) > 1024:
            raise ValueError("Invalid value for `employment_unit`, length must be less than or equal to `1024`")  # noqa: E501

        self._employment_unit = employment_unit

    @property
    def employer_identifier(self):
        """Gets the employer_identifier of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The employer_identifier of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._employer_identifier

    @employer_identifier.setter
    def employer_identifier(self, employer_identifier):
        """Sets the employer_identifier of this JobDescriptionContextRequestAllOf.


        :param employer_identifier: The employer_identifier of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if employer_identifier is not None and len(employer_identifier) > 1024:
            raise ValueError("Invalid value for `employer_identifier`, length must be less than or equal to `1024`")  # noqa: E501

        self._employer_identifier = employer_identifier

    @property
    def requirements(self):
        """Gets the requirements of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The requirements of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this JobDescriptionContextRequestAllOf.


        :param requirements: The requirements of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if requirements is not None and len(requirements) > 1024:
            raise ValueError("Invalid value for `requirements`, length must be less than or equal to `1024`")  # noqa: E501

        self._requirements = requirements

    @property
    def salary_currency(self):
        """Gets the salary_currency of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The salary_currency of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._salary_currency

    @salary_currency.setter
    def salary_currency(self, salary_currency):
        """Sets the salary_currency of this JobDescriptionContextRequestAllOf.


        :param salary_currency: The salary_currency of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if salary_currency is not None and len(salary_currency) > 1024:
            raise ValueError("Invalid value for `salary_currency`, length must be less than or equal to `1024`")  # noqa: E501

        self._salary_currency = salary_currency

    @property
    def salary_minimum(self):
        """Gets the salary_minimum of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The salary_minimum of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._salary_minimum

    @salary_minimum.setter
    def salary_minimum(self, salary_minimum):
        """Sets the salary_minimum of this JobDescriptionContextRequestAllOf.


        :param salary_minimum: The salary_minimum of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if salary_minimum is not None and len(salary_minimum) > 1024:
            raise ValueError("Invalid value for `salary_minimum`, length must be less than or equal to `1024`")  # noqa: E501

        self._salary_minimum = salary_minimum

    @property
    def salary_maximum(self):
        """Gets the salary_maximum of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The salary_maximum of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._salary_maximum

    @salary_maximum.setter
    def salary_maximum(self, salary_maximum):
        """Sets the salary_maximum of this JobDescriptionContextRequestAllOf.


        :param salary_maximum: The salary_maximum of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if salary_maximum is not None and len(salary_maximum) > 1024:
            raise ValueError("Invalid value for `salary_maximum`, length must be less than or equal to `1024`")  # noqa: E501

        self._salary_maximum = salary_maximum

    @property
    def salary_frequency(self):
        """Gets the salary_frequency of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The salary_frequency of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._salary_frequency

    @salary_frequency.setter
    def salary_frequency(self, salary_frequency):
        """Sets the salary_frequency of this JobDescriptionContextRequestAllOf.


        :param salary_frequency: The salary_frequency of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if salary_frequency is not None and len(salary_frequency) > 1024:
            raise ValueError("Invalid value for `salary_frequency`, length must be less than or equal to `1024`")  # noqa: E501

        self._salary_frequency = salary_frequency

    @property
    def incentive_compensation(self):
        """Gets the incentive_compensation of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The incentive_compensation of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._incentive_compensation

    @incentive_compensation.setter
    def incentive_compensation(self, incentive_compensation):
        """Sets the incentive_compensation of this JobDescriptionContextRequestAllOf.


        :param incentive_compensation: The incentive_compensation of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if incentive_compensation is not None and len(incentive_compensation) > 1024:
            raise ValueError("Invalid value for `incentive_compensation`, length must be less than or equal to `1024`")  # noqa: E501

        self._incentive_compensation = incentive_compensation

    @property
    def job_benefits(self):
        """Gets the job_benefits of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The job_benefits of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._job_benefits

    @job_benefits.setter
    def job_benefits(self, job_benefits):
        """Sets the job_benefits of this JobDescriptionContextRequestAllOf.


        :param job_benefits: The job_benefits of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: list[str]
        """

        self._job_benefits = job_benefits

    @property
    def employment_agreement(self):
        """Gets the employment_agreement of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The employment_agreement of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._employment_agreement

    @employment_agreement.setter
    def employment_agreement(self, employment_agreement):
        """Sets the employment_agreement of this JobDescriptionContextRequestAllOf.


        :param employment_agreement: The employment_agreement of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if employment_agreement is not None and len(employment_agreement) > 1024:
            raise ValueError("Invalid value for `employment_agreement`, length must be less than or equal to `1024`")  # noqa: E501

        self._employment_agreement = employment_agreement

    @property
    def job_term(self):
        """Gets the job_term of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The job_term of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._job_term

    @job_term.setter
    def job_term(self, job_term):
        """Sets the job_term of this JobDescriptionContextRequestAllOf.


        :param job_term: The job_term of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if job_term is not None and len(job_term) > 1024:
            raise ValueError("Invalid value for `job_term`, length must be less than or equal to `1024`")  # noqa: E501

        self._job_term = job_term

    @property
    def job_schedule(self):
        """Gets the job_schedule of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The job_schedule of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._job_schedule

    @job_schedule.setter
    def job_schedule(self, job_schedule):
        """Sets the job_schedule of this JobDescriptionContextRequestAllOf.


        :param job_schedule: The job_schedule of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if job_schedule is not None and len(job_schedule) > 1024:
            raise ValueError("Invalid value for `job_schedule`, length must be less than or equal to `1024`")  # noqa: E501

        self._job_schedule = job_schedule

    @property
    def work_hours(self):
        """Gets the work_hours of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The work_hours of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._work_hours

    @work_hours.setter
    def work_hours(self, work_hours):
        """Sets the work_hours of this JobDescriptionContextRequestAllOf.


        :param work_hours: The work_hours of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if work_hours is not None and len(work_hours) > 1024:
            raise ValueError("Invalid value for `work_hours`, length must be less than or equal to `1024`")  # noqa: E501

        self._work_hours = work_hours

    @property
    def employer_name(self):
        """Gets the employer_name of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The employer_name of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._employer_name

    @employer_name.setter
    def employer_name(self, employer_name):
        """Sets the employer_name of this JobDescriptionContextRequestAllOf.


        :param employer_name: The employer_name of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if employer_name is not None and len(employer_name) > 1024:
            raise ValueError("Invalid value for `employer_name`, length must be less than or equal to `1024`")  # noqa: E501

        self._employer_name = employer_name

    @property
    def employer_overview(self):
        """Gets the employer_overview of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The employer_overview of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._employer_overview

    @employer_overview.setter
    def employer_overview(self, employer_overview):
        """Sets the employer_overview of this JobDescriptionContextRequestAllOf.


        :param employer_overview: The employer_overview of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if employer_overview is not None and len(employer_overview) > 1024:
            raise ValueError("Invalid value for `employer_overview`, length must be less than or equal to `1024`")  # noqa: E501

        self._employer_overview = employer_overview

    @property
    def employer_email(self):
        """Gets the employer_email of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The employer_email of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._employer_email

    @employer_email.setter
    def employer_email(self, employer_email):
        """Sets the employer_email of this JobDescriptionContextRequestAllOf.


        :param employer_email: The employer_email of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if employer_email is not None and len(employer_email) > 1024:
            raise ValueError("Invalid value for `employer_email`, length must be less than or equal to `1024`")  # noqa: E501

        self._employer_email = employer_email

    @property
    def employer_website(self):
        """Gets the employer_website of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The employer_website of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._employer_website

    @employer_website.setter
    def employer_website(self, employer_website):
        """Sets the employer_website of this JobDescriptionContextRequestAllOf.


        :param employer_website: The employer_website of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if employer_website is not None and len(employer_website) > 1024:
            raise ValueError("Invalid value for `employer_website`, length must be less than or equal to `1024`")  # noqa: E501

        self._employer_website = employer_website

    @property
    def employer_address(self):
        """Gets the employer_address of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The employer_address of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._employer_address

    @employer_address.setter
    def employer_address(self, employer_address):
        """Sets the employer_address of this JobDescriptionContextRequestAllOf.


        :param employer_address: The employer_address of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if employer_address is not None and len(employer_address) > 1024:
            raise ValueError("Invalid value for `employer_address`, length must be less than or equal to `1024`")  # noqa: E501

        self._employer_address = employer_address

    @property
    def employer_phone(self):
        """Gets the employer_phone of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The employer_phone of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._employer_phone

    @employer_phone.setter
    def employer_phone(self, employer_phone):
        """Sets the employer_phone of this JobDescriptionContextRequestAllOf.


        :param employer_phone: The employer_phone of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if employer_phone is not None and len(employer_phone) > 1024:
            raise ValueError("Invalid value for `employer_phone`, length must be less than or equal to `1024`")  # noqa: E501

        self._employer_phone = employer_phone

    @property
    def date_posted(self):
        """Gets the date_posted of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The date_posted of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._date_posted

    @date_posted.setter
    def date_posted(self, date_posted):
        """Sets the date_posted of this JobDescriptionContextRequestAllOf.


        :param date_posted: The date_posted of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if date_posted is not None and len(date_posted) > 1024:
            raise ValueError("Invalid value for `date_posted`, length must be less than or equal to `1024`")  # noqa: E501

        self._date_posted = date_posted

    @property
    def valid_through(self):
        """Gets the valid_through of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The valid_through of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._valid_through

    @valid_through.setter
    def valid_through(self, valid_through):
        """Sets the valid_through of this JobDescriptionContextRequestAllOf.


        :param valid_through: The valid_through of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if valid_through is not None and len(valid_through) > 1024:
            raise ValueError("Invalid value for `valid_through`, length must be less than or equal to `1024`")  # noqa: E501

        self._valid_through = valid_through

    @property
    def job_openings(self):
        """Gets the job_openings of this JobDescriptionContextRequestAllOf.  # noqa: E501


        :return: The job_openings of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._job_openings

    @job_openings.setter
    def job_openings(self, job_openings):
        """Sets the job_openings of this JobDescriptionContextRequestAllOf.


        :param job_openings: The job_openings of this JobDescriptionContextRequestAllOf.  # noqa: E501
        :type: str
        """
        if job_openings is not None and len(job_openings) > 1024:
            raise ValueError("Invalid value for `job_openings`, length must be less than or equal to `1024`")  # noqa: E501

        self._job_openings = job_openings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobDescriptionContextRequestAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
