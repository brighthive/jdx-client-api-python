# coding: utf-8

"""
    JDX reference application API

    This is a collection of schemas and endpoints for the various JDX, Concentric Sky facing REST endpoints, the schemas define an API contract of sorts between the request and response expectations of the JDX reference application. This API is to be mutually developed by Concentric Sky and BrightHive.  # noqa: E501

    The version of the OpenAPI document: 0.0.12
    Contact: engineering@brighthive.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FrameworkRecommendationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pipeline_id': 'str',
        'timestamp': 'datetime',
        'framework_recommendations': 'list[ScoredRecommendation]'
    }

    attribute_map = {
        'pipeline_id': 'pipelineID',
        'timestamp': 'timestamp',
        'framework_recommendations': 'frameworkRecommendations'
    }

    def __init__(self, pipeline_id=None, timestamp=None, framework_recommendations=None):  # noqa: E501
        """FrameworkRecommendationResponse - a model defined in OpenAPI"""  # noqa: E501

        self._pipeline_id = None
        self._timestamp = None
        self._framework_recommendations = None
        self.discriminator = None

        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if timestamp is not None:
            self.timestamp = timestamp
        if framework_recommendations is not None:
            self.framework_recommendations = framework_recommendations

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this FrameworkRecommendationResponse.  # noqa: E501

        An identifier for this jdx reference application session of converting a raw job description  # noqa: E501

        :return: The pipeline_id of this FrameworkRecommendationResponse.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this FrameworkRecommendationResponse.

        An identifier for this jdx reference application session of converting a raw job description  # noqa: E501

        :param pipeline_id: The pipeline_id of this FrameworkRecommendationResponse.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def timestamp(self):
        """Gets the timestamp of this FrameworkRecommendationResponse.  # noqa: E501

        A timestamp of when this response was generated  # noqa: E501

        :return: The timestamp of this FrameworkRecommendationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this FrameworkRecommendationResponse.

        A timestamp of when this response was generated  # noqa: E501

        :param timestamp: The timestamp of this FrameworkRecommendationResponse.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def framework_recommendations(self):
        """Gets the framework_recommendations of this FrameworkRecommendationResponse.  # noqa: E501


        :return: The framework_recommendations of this FrameworkRecommendationResponse.  # noqa: E501
        :rtype: list[ScoredRecommendation]
        """
        return self._framework_recommendations

    @framework_recommendations.setter
    def framework_recommendations(self, framework_recommendations):
        """Sets the framework_recommendations of this FrameworkRecommendationResponse.


        :param framework_recommendations: The framework_recommendations of this FrameworkRecommendationResponse.  # noqa: E501
        :type: list[ScoredRecommendation]
        """

        self._framework_recommendations = framework_recommendations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FrameworkRecommendationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
