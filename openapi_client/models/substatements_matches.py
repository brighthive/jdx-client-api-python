# coding: utf-8

"""
    JDX reference application API

    This is a collection of schemas and endpoints for the various JDX, Concentric Sky facing REST endpoints, the schemas define an API contract of sorts between the request and response expectations of the JDX reference application. This API is to be mutually developed by Concentric Sky and BrightHive.  # noqa: E501

    The version of the OpenAPI document: 0.0.10
    Contact: engineering@brighthive.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SubstatementsMatches(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'recommendation_id': 'str',
        'name': 'str',
        'description': 'str',
        'defined_term_set': 'str',
        'term_code': 'str',
        'value': 'str'
    }

    attribute_map = {
        'recommendation_id': 'recommendationID',
        'name': 'name',
        'description': 'description',
        'defined_term_set': 'definedTermSet',
        'term_code': 'termCode',
        'value': 'value'
    }

    def __init__(self, recommendation_id=None, name=None, description=None, defined_term_set=None, term_code=None, value=None):  # noqa: E501
        """SubstatementsMatches - a model defined in OpenAPI"""  # noqa: E501

        self._recommendation_id = None
        self._name = None
        self._description = None
        self._defined_term_set = None
        self._term_code = None
        self._value = None
        self.discriminator = None

        if recommendation_id is not None:
            self.recommendation_id = recommendation_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if defined_term_set is not None:
            self.defined_term_set = defined_term_set
        if term_code is not None:
            self.term_code = term_code
        if value is not None:
            self.value = value

    @property
    def recommendation_id(self):
        """Gets the recommendation_id of this SubstatementsMatches.  # noqa: E501


        :return: The recommendation_id of this SubstatementsMatches.  # noqa: E501
        :rtype: str
        """
        return self._recommendation_id

    @recommendation_id.setter
    def recommendation_id(self, recommendation_id):
        """Sets the recommendation_id of this SubstatementsMatches.


        :param recommendation_id: The recommendation_id of this SubstatementsMatches.  # noqa: E501
        :type: str
        """

        self._recommendation_id = recommendation_id

    @property
    def name(self):
        """Gets the name of this SubstatementsMatches.  # noqa: E501


        :return: The name of this SubstatementsMatches.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubstatementsMatches.


        :param name: The name of this SubstatementsMatches.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this SubstatementsMatches.  # noqa: E501


        :return: The description of this SubstatementsMatches.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SubstatementsMatches.


        :param description: The description of this SubstatementsMatches.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def defined_term_set(self):
        """Gets the defined_term_set of this SubstatementsMatches.  # noqa: E501


        :return: The defined_term_set of this SubstatementsMatches.  # noqa: E501
        :rtype: str
        """
        return self._defined_term_set

    @defined_term_set.setter
    def defined_term_set(self, defined_term_set):
        """Sets the defined_term_set of this SubstatementsMatches.


        :param defined_term_set: The defined_term_set of this SubstatementsMatches.  # noqa: E501
        :type: str
        """

        self._defined_term_set = defined_term_set

    @property
    def term_code(self):
        """Gets the term_code of this SubstatementsMatches.  # noqa: E501


        :return: The term_code of this SubstatementsMatches.  # noqa: E501
        :rtype: str
        """
        return self._term_code

    @term_code.setter
    def term_code(self, term_code):
        """Sets the term_code of this SubstatementsMatches.


        :param term_code: The term_code of this SubstatementsMatches.  # noqa: E501
        :type: str
        """

        self._term_code = term_code

    @property
    def value(self):
        """Gets the value of this SubstatementsMatches.  # noqa: E501


        :return: The value of this SubstatementsMatches.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SubstatementsMatches.


        :param value: The value of this SubstatementsMatches.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubstatementsMatches):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
